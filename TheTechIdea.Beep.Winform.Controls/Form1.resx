<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="beepuiManager1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="beepTree1.Nodes" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAE5UaGVUZWNoSWRlYS5CZWVwLldpbmZvcm0uQ29udHJvbHMuQ29t
        bW9uLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPW51bGwMAwAAAElTeXN0ZW0sIFZlcnNp
        b249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5
        DAQAAAA6RGF0YU1hbmFnZW1lbnRNb2RlbHMsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49
        bnVsbAwFAAAAQlRoZVRlY2hJZGVhLkJlZXAuVmlzLk1vZHVsZXMsIEN1bHR1cmU9bmV1dHJhbCwgUHVi
        bGljS2V5VG9rZW49bnVsbAUBAAAAM1RoZVRlY2hJZGVhLkJlZXAuV2luZm9ybS5Db250cm9scy5Db21t
        b24uU2ltcGxlSXRlbRcAAAATPElkPmtfX0JhY2tpbmdGaWVsZBU8TmFtZT5rX19CYWNraW5nRmllbGQV
        PFRleHQ+a19fQmFja2luZ0ZpZWxkGjxJbWFnZVBhdGg+a19fQmFja2luZ0ZpZWxkDV9kaXNwbGF5Rmll
        bGQLX3ZhbHVlRmllbGQZPENoaWxkcmVuPmtfX0JhY2tpbmdGaWVsZBc8TWVudUlEPmtfX0JhY2tpbmdG
        aWVsZBk8QWN0aW9uSUQ+a19fQmFja2luZ0ZpZWxkHDxSZWZlcmVuY2VJRD5rX19CYWNraW5nRmllbGQh
        PE93bmVyUmVmZXJlbmNlSUQ+a19fQmFja2luZ0ZpZWxkITxPdGhlclJlZmVyZW5jZUlEPmtfX0JhY2tp
        bmdGaWVsZBo8UG9pbnRUeXBlPmtfX0JhY2tpbmdGaWVsZBs8T2JqZWN0VHlwZT5rX19CYWNraW5nRmll
        bGQcPEJyYW5jaENsYXNzPmtfX0JhY2tpbmdGaWVsZBs8QnJhbmNobmFtZT5rX19CYWNraW5nRmllbGQZ
        PEl0ZW1UeXBlPmtfX0JhY2tpbmdGaWVsZBk8Q2F0ZWdvcnk+a19fQmFja2luZ0ZpZWxkFDxVcmk+a19f
        QmFja2luZ0ZpZWxkGzxNZXRob2ROYW1lPmtfX0JhY2tpbmdGaWVsZB88a2V5Q29tYmluYXRpb24+a19f
        QmFja2luZ0ZpZWxkKjxBc3NlbWJseUNsYXNzRGVmaW5pdGlvbklEPmtfX0JhY2tpbmdGaWVsZBk8QnJh
        bmNoSUQ+a19fQmFja2luZ0ZpZWxkAQEBAQEBBAEBAQEBBAEBAQQEAQEBAQGqAVN5c3RlbS5Db21wb25l
        bnRNb2RlbC5CaW5kaW5nTGlzdGAxW1tUaGVUZWNoSWRlYS5CZWVwLldpbmZvcm0uQ29udHJvbHMuQ29t
        bW9uLlNpbXBsZUl0ZW0sIFRoZVRlY2hJZGVhLkJlZXAuV2luZm9ybS5Db250cm9scy5Db21tb24sIEN1
        bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbF1dAwAAACJUaGVUZWNoSWRlYS5CZWVwLlZp
        cy5FbnVtUG9pbnRUeXBlBAAAAClUaGVUZWNoSWRlYS5CZWVwLlZpcy5Nb2R1bGVzLk1lbnVJdGVtVHlw
        ZQUAAAAtVGhlVGVjaElkZWEuQmVlcC5VdGlsaXRpZXMuRGF0YXNvdXJjZUNhdGVnb3J5BAAAAAIAAAAG
        BgAAACQwYWMzYmVmNC1hZWQxLTRhZjgtYTVlOS1hNDBjMWQxZjJmMGIKBgcAAAACVDEKCgoJCAAAAAoK
        CgoKBff///8iVGhlVGVjaElkZWEuQmVlcC5WaXMuRW51bVBvaW50VHlwZQEAAAAHdmFsdWVfXwAIBAAA
        AAAAAAAKCgoF9v///ylUaGVUZWNoSWRlYS5CZWVwLlZpcy5Nb2R1bGVzLk1lbnVJdGVtVHlwZQEAAAAH
        dmFsdWVfXwAIBQAAAAAAAAAF9f///y1UaGVUZWNoSWRlYS5CZWVwLlV0aWxpdGllcy5EYXRhc291cmNl
        Q2F0ZWdvcnkBAAAAB3ZhbHVlX18ACAQAAAAAAAAACgoKCgoFCAAAAKoBU3lzdGVtLkNvbXBvbmVudE1v
        ZGVsLkJpbmRpbmdMaXN0YDFbW1RoZVRlY2hJZGVhLkJlZXAuV2luZm9ybS5Db250cm9scy5Db21tb24u
        U2ltcGxlSXRlbSwgVGhlVGVjaElkZWEuQmVlcC5XaW5mb3JtLkNvbnRyb2xzLkNvbW1vbiwgQ3VsdHVy
        ZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxsXV0IAAAACWFkZE5ld1BvcxZyYWlzZUxpc3RDaGFu
        Z2VkRXZlbnRzFnJhaXNlSXRlbUNoYW5nZWRFdmVudHMIYWxsb3dOZXcJYWxsb3dFZGl0C2FsbG93UmVt
        b3ZlD3VzZXJTZXRBbGxvd05ldxJDb2xsZWN0aW9uYDEraXRlbXMAAAAAAAAAAwgBAQEBAQGoAVN5c3Rl
        bS5Db2xsZWN0aW9ucy5HZW5lcmljLkxpc3RgMVtbVGhlVGVjaElkZWEuQmVlcC5XaW5mb3JtLkNvbnRy
        b2xzLkNvbW1vbi5TaW1wbGVJdGVtLCBUaGVUZWNoSWRlYS5CZWVwLldpbmZvcm0uQ29udHJvbHMuQ29t
        bW9uLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPW51bGxdXQMAAAD/////AQABAQEACQwA
        AAAMDQAAAF9UaGVUZWNoSWRlYS5CZWVwLldpbmZvcm0uQ29udHJvbHMuQ29tbW9uLCBWZXJzaW9uPTEu
        MC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbAQMAAAAqAFTeXN0ZW0uQ29s
        bGVjdGlvbnMuR2VuZXJpYy5MaXN0YDFbW1RoZVRlY2hJZGVhLkJlZXAuV2luZm9ybS5Db250cm9scy5D
        b21tb24uU2ltcGxlSXRlbSwgVGhlVGVjaElkZWEuQmVlcC5XaW5mb3JtLkNvbnRyb2xzLkNvbW1vbiwg
        Q3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxsXV0DAAAABl9pdGVtcwVfc2l6ZQhfdmVy
        c2lvbgQAADVUaGVUZWNoSWRlYS5CZWVwLldpbmZvcm0uQ29udHJvbHMuQ29tbW9uLlNpbXBsZUl0ZW1b
        XQ0AAAAICAkOAAAAAQAAAAQAAAAHDgAAAAABAAAABAAAAAQzVGhlVGVjaElkZWEuQmVlcC5XaW5mb3Jt
        LkNvbnRyb2xzLkNvbW1vbi5TaW1wbGVJdGVtAgAAAAkPAAAADQMBDwAAAAEAAAAGEAAAACQ3Mjk3MGI4
        My1jM2JlLTRlMWEtOWZlOC03OWU5NGIzNDQ4M2YKBhEAAAADdDFjCgoKCRIAAAAKCgoKCgHt////9///
        /wAAAAAKCgoB7P////b///8AAAAAAev////1////AAAAAAoKCgoKARIAAAAIAAAA/////wEAAQEBAAkW
        AAAAARYAAAAMAAAACRcAAAAAAAAAAAAAAAcXAAAAAAEAAAAAAAAABDNUaGVUZWNoSWRlYS5CZWVwLldp
        bmZvcm0uQ29udHJvbHMuQ29tbW9uLlNpbXBsZUl0ZW0CAAAACw==
</value>
  </data>
</root>